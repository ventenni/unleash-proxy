/// <reference types="node" />
import { EventEmitter } from 'events';
import { ClientFeaturesResponse, FeatureInterface } from '../feature';
import { CustomHeaders, CustomHeadersFunction } from '../headers';
import { HttpOptions } from '../http-options';
import { TagFilter } from '../tags';
import { BootstrapProvider } from './bootstrap-provider';
import { StorageProvider } from './storage-provider';
import { Segment } from '../strategy/strategy';
export interface RepositoryInterface extends EventEmitter {
    getToggle(name: string): FeatureInterface;
    getToggles(): FeatureInterface[];
    getSegment(id: number): Segment | undefined;
    stop(): void;
    start(): Promise<void>;
}
export interface RepositoryOptions {
    url: string;
    appName: string;
    instanceId: string;
    projectName?: string;
    refreshInterval: number;
    timeout?: number;
    headers?: CustomHeaders;
    customHeadersFunction?: CustomHeadersFunction;
    httpOptions?: HttpOptions;
    namePrefix?: string;
    tags?: Array<TagFilter>;
    bootstrapProvider: BootstrapProvider;
    bootstrapOverride?: boolean;
    storageProvider: StorageProvider<ClientFeaturesResponse>;
}
export default class Repository extends EventEmitter implements EventEmitter {
    private timer;
    private url;
    private etag;
    private appName;
    private instanceId;
    private refreshInterval;
    private headers?;
    private customHeadersFunction?;
    private timeout?;
    private stopped;
    private projectName?;
    private httpOptions?;
    private readonly namePrefix?;
    private readonly tags?;
    private bootstrapProvider;
    private bootstrapOverride;
    private storageProvider;
    private ready;
    private connected;
    private data;
    private segments;
    constructor({ url, appName, instanceId, projectName, refreshInterval, timeout, headers, customHeadersFunction, httpOptions, namePrefix, tags, bootstrapProvider, bootstrapOverride, storageProvider, }: RepositoryOptions);
    timedFetch(): void;
    validateFeature(feature: FeatureInterface): void;
    start(): Promise<void>;
    loadBackup(): Promise<void>;
    setReady(): void;
    createSegmentLookup(segments: Segment[] | undefined): Map<number, Segment>;
    save(response: ClientFeaturesResponse, fromApi: boolean): Promise<void>;
    notEmpty(content: ClientFeaturesResponse): boolean;
    loadBootstrap(): Promise<void>;
    private convertToMap;
    fetch(): Promise<void>;
    mergeTagsToStringArray(tags: Array<TagFilter>): Array<string>;
    stop(): void;
    getSegment(segmentId: number): Segment | undefined;
    getToggle(name: string): FeatureInterface;
    getToggles(): FeatureInterface[];
}
//# sourceMappingURL=index.d.ts.map