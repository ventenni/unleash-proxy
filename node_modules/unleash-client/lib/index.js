"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.countVariant = exports.count = exports.forceGetVariant = exports.getVariant = exports.getFeatureToggleDefinitions = exports.getFeatureToggleDefinition = exports.destroy = exports.isEnabled = exports.startUnleash = exports.initialize = exports.UnleashEvents = exports.InMemStorageProvider = exports.Unleash = exports.Strategy = void 0;
var events_1 = require("events");
var unleash_1 = require("./unleash");
Object.defineProperty(exports, "Unleash", { enumerable: true, get: function () { return unleash_1.Unleash; } });
var variant_1 = require("./variant");
var events_2 = require("./events");
Object.defineProperty(exports, "UnleashEvents", { enumerable: true, get: function () { return events_2.UnleashEvents; } });
var storage_provider_in_mem_1 = require("./repository/storage-provider-in-mem");
exports.InMemStorageProvider = storage_provider_in_mem_1.default;
// exports
var index_1 = require("./strategy/index");
Object.defineProperty(exports, "Strategy", { enumerable: true, get: function () { return index_1.Strategy; } });
var instance;
function initialize(options) {
    if (instance) {
        instance.emit(events_2.UnleashEvents.Warn, 'This global unleash instance is initialized multiple times.');
    }
    instance = new unleash_1.Unleash(options);
    instance.on('error', function () { });
    return instance;
}
exports.initialize = initialize;
function startUnleash(options) {
    return __awaiter(this, void 0, void 0, function () {
        var unleash;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    unleash = initialize(options);
                    return [4 /*yield*/, (0, events_1.once)(unleash, 'synchronized')];
                case 1:
                    _a.sent();
                    return [2 /*return*/, unleash];
            }
        });
    });
}
exports.startUnleash = startUnleash;
function isEnabled(name, context, fallbackValue) {
    if (context === void 0) { context = {}; }
    return instance ? instance.isEnabled(name, context, fallbackValue) : !!fallbackValue;
}
exports.isEnabled = isEnabled;
function destroy() {
    if (instance) {
        instance.destroy();
    }
    instance = undefined;
}
exports.destroy = destroy;
function getFeatureToggleDefinition(toggleName) {
    return instance && instance.getFeatureToggleDefinition(toggleName);
}
exports.getFeatureToggleDefinition = getFeatureToggleDefinition;
function getFeatureToggleDefinitions() {
    return instance && instance.getFeatureToggleDefinitions();
}
exports.getFeatureToggleDefinitions = getFeatureToggleDefinitions;
function getVariant(name, context, fallbackVariant) {
    if (context === void 0) { context = {}; }
    var variant = fallbackVariant || (0, variant_1.getDefaultVariant)();
    return instance ? instance.getVariant(name, context, variant) : variant;
}
exports.getVariant = getVariant;
function forceGetVariant(name, context, fallbackVariant) {
    if (context === void 0) { context = {}; }
    var variant = fallbackVariant || (0, variant_1.getDefaultVariant)();
    return instance ? instance.forceGetVariant(name, context, variant) : variant;
}
exports.forceGetVariant = forceGetVariant;
function count(toggleName, enabled) {
    return instance && instance.count(toggleName, enabled);
}
exports.count = count;
function countVariant(toggleName, variantName) {
    return instance && instance.countVariant(toggleName, variantName);
}
exports.countVariant = countVariant;
//# sourceMappingURL=index.js.map