"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var strategy_1 = require("./strategy");
var util_1 = require("./util");
var helpers_1 = require("../helpers");
var STICKINESS = {
    default: 'default',
    random: 'random',
};
var FlexibleRolloutStrategy = /** @class */ (function (_super) {
    __extends(FlexibleRolloutStrategy, _super);
    function FlexibleRolloutStrategy(radnomGenerator) {
        var _this = _super.call(this, 'flexibleRollout') || this;
        _this.randomGenerator = function () { return "".concat(Math.round(Math.random() * 100) + 1); };
        if (radnomGenerator) {
            _this.randomGenerator = radnomGenerator;
        }
        return _this;
    }
    FlexibleRolloutStrategy.prototype.resolveStickiness = function (stickiness, context) {
        switch (stickiness) {
            case STICKINESS.default:
                return context.userId || context.sessionId || this.randomGenerator();
            case STICKINESS.random:
                return this.randomGenerator();
            default:
                return (0, helpers_1.resolveContextValue)(context, stickiness);
        }
    };
    FlexibleRolloutStrategy.prototype.isEnabled = function (parameters, context) {
        var groupId = parameters.groupId || context.featureToggle || '';
        var percentage = Number(parameters.rollout);
        var stickiness = parameters.stickiness || STICKINESS.default;
        var stickinessId = this.resolveStickiness(stickiness, context);
        if (!stickinessId) {
            return false;
        }
        var normalizedUserId = (0, util_1.default)(stickinessId, groupId);
        return percentage > 0 && normalizedUserId <= percentage;
    };
    return FlexibleRolloutStrategy;
}(strategy_1.Strategy));
exports.default = FlexibleRolloutStrategy;
//# sourceMappingURL=flexible-rollout-strategy.js.map