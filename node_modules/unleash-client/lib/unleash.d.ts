/// <reference types="node" />
import { EventEmitter } from 'events';
import { RepositoryInterface } from './repository';
import { CustomHeaders, CustomHeadersFunction } from './headers';
import { Context } from './context';
import { Strategy } from './strategy';
import { ClientFeaturesResponse, FeatureInterface } from './feature';
import { Variant } from './variant';
import { FallbackFunction } from './helpers';
import { HttpOptions } from './http-options';
import { TagFilter } from './tags';
import { BootstrapOptions } from './repository/bootstrap-provider';
import { StorageProvider } from './repository/storage-provider';
import { UnleashEvents } from './events';
export { Strategy, UnleashEvents };
export interface UnleashConfig {
    appName: string;
    environment?: string;
    instanceId?: string;
    url: string;
    refreshInterval?: number;
    projectName?: string;
    metricsInterval?: number;
    namePrefix?: string;
    disableMetrics?: boolean;
    backupPath?: string;
    strategies?: Strategy[];
    customHeaders?: CustomHeaders;
    customHeadersFunction?: CustomHeadersFunction;
    timeout?: number;
    repository?: RepositoryInterface;
    httpOptions?: HttpOptions;
    tags?: Array<TagFilter>;
    bootstrap?: BootstrapOptions;
    bootstrapOverride?: boolean;
    storageProvider?: StorageProvider<ClientFeaturesResponse>;
    disableAutoStart?: boolean;
}
export interface StaticContext {
    appName: string;
    environment: string;
}
export declare class Unleash extends EventEmitter {
    private repository;
    private client;
    private metrics;
    private staticContext;
    private synchronized;
    private ready;
    constructor({ appName, environment, projectName, instanceId, url, refreshInterval, metricsInterval, disableMetrics, backupPath, strategies, repository, namePrefix, customHeaders, customHeadersFunction, timeout, httpOptions, tags, bootstrap, bootstrapOverride, storageProvider, disableAutoStart, }: UnleashConfig);
    private cleanUnleashUrl;
    start(): Promise<void>;
    destroy(): void;
    isEnabled(name: string, context?: Context, fallbackFunction?: FallbackFunction): boolean;
    isEnabled(name: string, context?: Context, fallbackValue?: boolean): boolean;
    getVariant(name: string, context?: Context, fallbackVariant?: Variant): Variant;
    forceGetVariant(name: string, context?: Context, fallbackVariant?: Variant): Variant;
    getFeatureToggleDefinition(toggleName: string): FeatureInterface;
    getFeatureToggleDefinitions(): FeatureInterface[];
    count(toggleName: string, enabled: boolean): void;
    countVariant(toggleName: string, variantName: string): void;
}
//# sourceMappingURL=unleash.d.ts.map