import { Unleash, UnleashConfig } from './unleash';
import { Variant } from './variant';
import { Context } from './context';
import { TagFilter } from './tags';
import { UnleashEvents } from './events';
import { ClientFeaturesResponse } from './feature';
import InMemStorageProvider from './repository/storage-provider-in-mem';
export { Strategy } from './strategy/index';
export { Context, Variant, Unleash, TagFilter, InMemStorageProvider, UnleashEvents };
export type { ClientFeaturesResponse, UnleashConfig };
export declare function initialize(options: UnleashConfig): Unleash;
export declare function startUnleash(options: UnleashConfig): Promise<Unleash>;
export declare function isEnabled(name: string, context?: Context, fallbackValue?: boolean): boolean;
export declare function destroy(): void;
export declare function getFeatureToggleDefinition(toggleName: string): import("./feature").FeatureInterface | undefined;
export declare function getFeatureToggleDefinitions(): import("./feature").FeatureInterface[] | undefined;
export declare function getVariant(name: string, context?: Context, fallbackVariant?: Variant): Variant;
export declare function forceGetVariant(name: string, context?: Context, fallbackVariant?: Variant): Variant;
export declare function count(toggleName: string, enabled: boolean): void | undefined;
export declare function countVariant(toggleName: string, variantName: string): void | undefined;
//# sourceMappingURL=index.d.ts.map